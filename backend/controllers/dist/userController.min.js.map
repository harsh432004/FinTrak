{"version":3,"sources":["userController.js"],"names":["jwt","require","asyncHandler","bcrypt","User","crypto","register","req","res","_req$body","name","email","phone","password","address","identificationType","balance","moneyReceived","moneySend","requestReceived","salt","hashedPassword","user","regeneratorRuntime","async","_context","prev","next","status","message","awrap","findOne","sent","json","abrupt","genSalt","userExists","hash","create","identificationNumber","randomBytes","toString","isAdmin","_id","stop","_req$body2","userObj","_context2","body","t0","_context3","getUsers","users","newUsers","_context4","find","login","verify","_context5","findByIdAndUpdate","params","id","isVerified","new","getImage","_context6","findById","token","generateToken","sign","process","env","JWT_SECRET","module","exports","currentUser"],"mappings":"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","file":"userController.min.js","sourcesContent":["const jwt = require('jsonwebtoken')\r\nconst asyncHandler = require('express-async-handler')\r\nconst bcrypt = require('bcrypt')\r\nconst User = require('../models/userModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    Register new user\r\n// @route   POST /api/users/register\r\n// @access  Public\r\nconst register = asyncHandler(async (req, res) => {\r\n  const {\r\n    name,\r\n    email,\r\n    phone,\r\n    password,\r\n    address,\r\n    identificationType,\r\n    balance,\r\n    moneyReceived,\r\n    moneySend,\r\n    requestReceived,\r\n  } = req.body\r\n\r\n  if (\r\n    !name ||\r\n    !email ||\r\n    !password ||\r\n    !phone ||\r\n    !address ||\r\n    !identificationType\r\n  ) {\r\n    res.status(400).json({message: 'Please add all fields'})\r\n  }\r\n\r\n  // Check if user exists\r\n  const userExists = await User.findOne({ email })\r\n\r\n  if (userExists) {\r\n    res.status(400).json({message: 'User already exists'})\r\n    return;\r\n  }\r\n\r\n  // Hash password\r\n  const salt = await bcrypt.genSalt(10)\r\n  const hashedPassword = await bcrypt.hash(password, salt)\r\n\r\n  // Create user\r\n  const user = await User.create({\r\n    name,\r\n    email,\r\n    balance,\r\n    password: hashedPassword,\r\n    phone,\r\n    address,\r\n    identificationType,\r\n    moneySend,\r\n    moneyReceived,\r\n    requestReceived,\r\n    identificationNumber: crypto.randomBytes(6).toString('hex'),\r\n    isAdmin: false,\r\n    isVerified: true,\r\n  })\r\n\r\n  if (user) {\r\n    res.status(201).json({\r\n      _id: user.id,\r\n      name: user.name,\r\n      balance: user.balance,\r\n      email: user.email,\r\n      phone: user.phone,\r\n      address: user.address,\r\n      moneySend: user.moneySend,\r\n      moneyReceived: user.moneyReceived,\r\n      requestReceived: user.requestReceived,\r\n      identificationType: user.identificationType,\r\n      identificationNumber: user.identificationNumber,\r\n      isAdmin: user.isAdmin,\r\n      isVerified: user.isVerified,\r\n      token: generateToken(user._id),\r\n    })\r\n  } else {\r\n    res.status(400).json({message: 'Invalid user data'})\r\n  }\r\n})\r\n\r\n// @desc    login user\r\n// @route   POST /api/users/login\r\n// @access  Public\r\nconst login = asyncHandler(async (req, res) => {\r\n  const { email, password } = req.body\r\n  console.log(email, password)\r\n  const user = await User.findOne({ email })\r\n  if (user && (await bcrypt.compare(password, user.password))) {\r\n    var userObj = user.toObject()\r\n    delete userObj.password\r\n    res.status(200).json({ ...userObj, token: generateToken(user._id) })\r\n  } else {\r\n    res.status(401).json({message: 'Invalid credentials'})\r\n  }\r\n})\r\n\r\n// @desc    get current user\r\n// @route   GET /api/users/curent_user\r\n// @access  Protect\r\nconst currentUser = asyncHandler(async (req, res) => {\r\n  const user = {\r\n    _id: req.user._id,\r\n    email: req.user.email,\r\n    name: req.user.name,\r\n  }\r\n  res.status(200).json(user)\r\n})\r\n\r\n// @desc    get all users\r\n// @route   GET /api/users/get_users\r\n// @access  Protect\r\nconst getUsers = asyncHandler(async (req, res) => {\r\n  const users = await User.find()\r\n\r\n  let newUsers = users.filter((user) => {\r\n    return user._id.toString() !== req.user._id.toString()\r\n  })\r\n\r\n  if (newUsers) {\r\n    res.status(200).json(newUsers)\r\n  } else {\r\n    res.status(404).json({message: 'User not found'})\r\n  }\r\n})\r\n\r\n// @desc    verify user\r\n// @route   GET /api/users/verify/:id\r\n// @access  Protect\r\nconst verify = asyncHandler(async (req, res) => {\r\n  const user = await User.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      isVerified: req.body.isVerified,\r\n    },\r\n    { new: true }\r\n  )\r\n  if (user) {\r\n    res\r\n      .status(201)\r\n      .json({ _id: user._id, name: user.name, isVerified: user.isVerified })\r\n  } else {\r\n    res.status(404).json({message: 'User not found'})\r\n  }\r\n})\r\n// @desc    get uploaded image\r\n// @route   GET /api/users/get_image\r\n// @access  Protect\r\nconst getImage = asyncHandler(async (req, res) => {\r\n  const user = await User.findById(req.user._id)\r\n  if (user.image) {\r\n    res.status(201).json(user.image)\r\n  } else {\r\n    res.status(404).json({message: 'No user image'})\r\n  }\r\n})\r\n\r\nconst generateToken = (id) => { \r\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: '30d',\r\n  })\r\n}\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  currentUser,\r\n  getUsers,\r\n  verify,\r\n  getImage,\r\n}\r\n"]}