{"version":3,"sources":["userController.js"],"names":["jwt","require","asyncHandler","bcrypt","User","crypto","register","req","res","body","name","email","phone","password","address","identificationType","balance","moneyReceived","moneySend","requestReceived","status","json","message","findOne","userExists","genSalt","salt","hash","hashedPassword","create","identificationNumber","randomBytes","toString","isAdmin","isVerified","user","_id","id","token","generateToken","login","console","log","compare","userObj","toObject","currentUser","getUsers","find","users","newUsers","filter","verify","findByIdAndUpdate","params","getImage","findById","image","sign","process","env","JWT_SECRET","expiresIn","module","exports"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken')\r\nconst asyncHandler = require('express-async-handler')\r\nconst bcrypt = require('bcrypt')\r\nconst User = require('../models/userModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    Register new user\r\n// @route   POST /api/users/register\r\n// @access  Public\r\nconst register = asyncHandler(async (req, res) => {\r\n  const {\r\n    name,\r\n    email,\r\n    phone,\r\n    password,\r\n    address,\r\n    identificationType,\r\n    balance,\r\n    moneyReceived,\r\n    moneySend,\r\n    requestReceived,\r\n  } = req.body\r\n\r\n  if (\r\n    !name ||\r\n    !email ||\r\n    !password ||\r\n    !phone ||\r\n    !address ||\r\n    !identificationType\r\n  ) {\r\n    res.status(400).json({message: 'Please add all fields'})\r\n  }\r\n\r\n  // Check if user exists\r\n  const userExists = await User.findOne({ email })\r\n\r\n  if (userExists) {\r\n    res.status(400).json({message: 'User already exists'})\r\n    return;\r\n  }\r\n\r\n  // Hash password\r\n  const salt = await bcrypt.genSalt(10)\r\n  const hashedPassword = await bcrypt.hash(password, salt)\r\n\r\n  // Create user\r\n  const user = await User.create({\r\n    name,\r\n    email,\r\n    balance,\r\n    password: hashedPassword,\r\n    phone,\r\n    address,\r\n    identificationType,\r\n    moneySend,\r\n    moneyReceived,\r\n    requestReceived,\r\n    identificationNumber: crypto.randomBytes(6).toString('hex'),\r\n    isAdmin: false,\r\n    isVerified: true,\r\n  })\r\n\r\n  if (user) {\r\n    res.status(201).json({\r\n      _id: user.id,\r\n      name: user.name,\r\n      balance: user.balance,\r\n      email: user.email,\r\n      phone: user.phone,\r\n      address: user.address,\r\n      moneySend: user.moneySend,\r\n      moneyReceived: user.moneyReceived,\r\n      requestReceived: user.requestReceived,\r\n      identificationType: user.identificationType,\r\n      identificationNumber: user.identificationNumber,\r\n      isAdmin: user.isAdmin,\r\n      isVerified: user.isVerified,\r\n      token: generateToken(user._id),\r\n    })\r\n  } else {\r\n    res.status(400).json({message: 'Invalid user data'})\r\n  }\r\n})\r\n\r\n// @desc    login user\r\n// @route   POST /api/users/login\r\n// @access  Public\r\nconst login = asyncHandler(async (req, res) => {\r\n  const { email, password } = req.body\r\n  console.log(email, password)\r\n  const user = await User.findOne({ email })\r\n  if (user && (await bcrypt.compare(password, user.password))) {\r\n    var userObj = user.toObject()\r\n    delete userObj.password\r\n    res.status(200).json({ ...userObj, token: generateToken(user._id) })\r\n  } else {\r\n    res.status(401).json({message: 'Invalid credentials'})\r\n  }\r\n})\r\n\r\n// @desc    get current user\r\n// @route   GET /api/users/curent_user\r\n// @access  Protect\r\nconst currentUser = asyncHandler(async (req, res) => {\r\n  const user = {\r\n    _id: req.user._id,\r\n    email: req.user.email,\r\n    name: req.user.name,\r\n  }\r\n  res.status(200).json(user)\r\n})\r\n\r\n// @desc    get all users\r\n// @route   GET /api/users/get_users\r\n// @access  Protect\r\nconst getUsers = asyncHandler(async (req, res) => {\r\n  const users = await User.find()\r\n\r\n  let newUsers = users.filter((user) => {\r\n    return user._id.toString() !== req.user._id.toString()\r\n  })\r\n\r\n  if (newUsers) {\r\n    res.status(200).json(newUsers)\r\n  } else {\r\n    res.status(404).json({message: 'User not found'})\r\n  }\r\n})\r\n\r\n// @desc    verify user\r\n// @route   GET /api/users/verify/:id\r\n// @access  Protect\r\nconst verify = asyncHandler(async (req, res) => {\r\n  const user = await User.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      isVerified: req.body.isVerified,\r\n    },\r\n    { new: true }\r\n  )\r\n  if (user) {\r\n    res\r\n      .status(201)\r\n      .json({ _id: user._id, name: user.name, isVerified: user.isVerified })\r\n  } else {\r\n    res.status(404).json({message: 'User not found'})\r\n  }\r\n})\r\n// @desc    get uploaded image\r\n// @route   GET /api/users/get_image\r\n// @access  Protect\r\nconst getImage = asyncHandler(async (req, res) => {\r\n  const user = await User.findById(req.user._id)\r\n  if (user.image) {\r\n    res.status(201).json(user.image)\r\n  } else {\r\n    res.status(404).json({message: 'No user image'})\r\n  }\r\n})\r\n\r\nconst generateToken = (id) => { \r\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: '30d',\r\n  })\r\n}\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  currentUser,\r\n  getUsers,\r\n  verify,\r\n  getImage,\r\n}\r\n"],"file":"userController.dev.js"}