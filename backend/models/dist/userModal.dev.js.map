{"version":3,"sources":["userModal.js"],"names":["mongoose","require","userSchema","Schema","name","type","String","required","trim","email","unique","match","password","validate","validator","value","passwordRegex","test","message","phone","address","identificationType","module","exports","model"],"mappingsxB;;AAEA,IAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AACnCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,kBAAP,CAFR;AAGFC,IAAAA,IAAI,EAAE;AAHJ,GAD6B;AAMnCC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,mBAAP,CAFP;AAGHG,IAAAA,MAAM,EAAE,IAHL;AAIHC,IAAAA,KAAK,EAAE,CACH,4BADG,EAEH,sCAFG;AAJJ,GAN4B;AAenCC,EAAAA,QAAQ,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP,CAFJ;AAGNM,IAAAA,QAAQ,EAAE;AACNC,MAAAA,SAAS,EAAE,mBAAUC,KAAV,EAAiB;AACxB;AACA,YAAMC,aAAa,GAAG,wCAAtB;AACA,eAAOA,aAAa,CAACC,IAAd,CAAmBF,KAAnB,CAAP;AACH,OALK;AAMNG,MAAAA,OAAO,EAAE;AANH;AAHJ,GAfyB;AA2BnCC,EAAAA,KAAK,EAAE;AACHd,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,0BAAP,CAFP;AAGHI,IAAAA,KAAK,EAAE,CAAC,UAAD,EAAa,gCAAb;AAHJ,GA3B4B;AAgCnCS,EAAAA,OAAO,EAAE;AACLf,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,qBAAP;AAFL,GAhC0B;AAoCnCc,EAAAA,kBAAkB,EAAE;AAChBhB,IAAAA,IAAI,EAAEC,MADU;AAEhBC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,iCAAP,CAFM;AAGhB,YAAM,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,aAA/B;AAHU;AApCe,CAApB,CAAnB;AA2CAe,MAAM,CAACC,OAAP,GAAiBvB,QAAQ,CAACwB,KAAT,CAAe,MAAf,EAAuBtB,UAAvB,CAAjB","sourcesContent":["// const mongoose = require('mongoose')\r\n\r\n// const userSchema = new mongoose.Schema(\r\n//   {\r\n//     // name: {\r\n//     //   type: String,\r\n//     //   required: [true, 'Please add a name'],\r\n//     // },\r\n//     name: {\r\n//       type: String,\r\n//       required: [true, 'Please add a name'],\r\n//       validate: {\r\n//         validator: function (v) {\r\n//           return /^[a-zA-Z ]{2,30}$/.test(v) // Name should only contain letters and spaces, 2-30 characters\r\n//         },\r\n//         message: (props) => `${props.value} is not a valid name! Only letters and spaces are allowed, and it must be 2-30 characters long.`,\r\n//       },\r\n//     },\r\n//     // email: {\r\n//     //   type: String,\r\n//     //   required: [true, 'Please add an email'],\r\n//     //   unique: true,\r\n//     // },\r\n//     email: {\r\n//       type: String,\r\n//       required: [true, 'Please add an email'],\r\n//       unique: true,\r\n//       validate: {\r\n//         validator: function (v) {\r\n//           return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v) // Basic email format\r\n//         },\r\n//         message: (props) => `${props.value} is not a valid email!`,\r\n//       },\r\n//     },\r\n//     // phone: {\r\n//     //   type: String,\r\n//     //   required: [true, 'Please add a phone number'],\r\n//     // },\r\n//     phone: {\r\n//       type: String,\r\n//       required: [true, 'Please add a phone number'],\r\n//       validate: {\r\n//         validator: function (v) {\r\n//           return /^[0-9]{10}$/.test(v); // Example: 10-digit phone number\r\n//         },\r\n//         message: (props) => `${props.value} is not a valid phone number!`,\r\n//       },\r\n//     },\r\n//     // password: {\r\n//     //   type: String,\r\n//     //   required: [true, 'Please add a password'],\r\n//     //   min: [6, 'password must contain at least 6 numbers'],\r\n//     //   max: 12,\r\n//     // },\r\n//     password: {\r\n//       type: String,\r\n//       required: [true, 'Please add a password'],\r\n//       validate: {\r\n//         validator: function (v) {\r\n//           return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,12}$/.test(v) // Password: 6-12 characters, at least one letter and one number\r\n//         },\r\n//         message: (props) => `Password must be 6-12 characters long, and include at least one letter and one number.`,\r\n//       },\r\n//     },\r\n//     identificationType: {\r\n//       type: String,\r\n//       required: [true, 'Please add identification type'],\r\n//       enum: ['driver license', 'passport', 'national ID'],\r\n//     },\r\n//     identificationNumber: {\r\n//       type: String,\r\n//       required: [true, 'Please add the identification number'],\r\n//       min: [6, 'at least 6 numbers'],\r\n//       max: 12,\r\n//       unique: true,\r\n//     },\r\n//     balance: {\r\n//       type: Number,\r\n//       default: 1000,\r\n//     },\r\n//     moneySend: {\r\n//       type: Number,\r\n//       default: 0,\r\n//     },\r\n//     moneyReceived: {\r\n//       type: Number,\r\n//       default: 0,\r\n//     },\r\n//     requestReceived: {\r\n//       type: Number,\r\n//       default: 0,\r\n//     },\r\n//     transactionLimit: {\r\n//       type: Number,\r\n//       default: 5000, // Daily transaction limit in rupees\r\n//     },\r\n//     address: {\r\n//       type: String,\r\n//       required: true,\r\n//     },\r\n//     image: {\r\n//       type: String,\r\n//     },\r\n//     isVerified: {\r\n//       type: Boolean,\r\n//       default: false,\r\n//     },\r\n//     isAdmin: {\r\n//       type: Boolean,\r\n//       default: false,\r\n//     },\r\n//   },\r\n//   { timestamps: true }\r\n// )\r\n\r\n// module.exports = mongoose.model('User', userSchema)\r\nconst mongoose = require('mongoose');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        required: [true, 'Name is required'],\r\n        trim: true,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, 'Email is required'],\r\n        unique: true,\r\n        match: [\r\n            /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n            'Please provide a valid email address',\r\n        ],\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: [true, 'Password is required'],\r\n        validate: {\r\n            validator: function (value) {\r\n                // Password must be 6-12 characters long and include at least one letter and one number\r\n                const passwordRegex = /^(?=.[A-Za-z])(?=.\\d)[A-Za-z\\d]{6,12}$/;\r\n                return passwordRegex.test(value);\r\n            },\r\n            message: 'Password must be 6-12 characters long, and include at least one letter and one number.',\r\n        },\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: [true, 'Phone number is required'],\r\n        match: [/^\\d{10}$/, 'Phone number must be 10 digits'],\r\n    },\r\n    address: {\r\n        type: String,\r\n        required: [true, 'Address is required'],\r\n    },\r\n    identificationType: {\r\n        type: String,\r\n        required: [true, 'Identification type is required'],\r\n        enum: ['driver license', 'passport', 'national ID'],\r\n    },\r\n});\r\n\r\nmodule.exports = mongoose.model('User', userSchema);"],"file":"userModal.dev.js"}