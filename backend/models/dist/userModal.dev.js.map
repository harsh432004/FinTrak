{"version":3,"sources":["userModal.js"],"names":["mongoose","require","userSchema","Schema","name","type","String","required","validate","validator","v","test","message","props","value","email","unique","phone","password","identificationType","identificationNumber","min","max","balance","Number","moneySend","moneyReceived","requestReceived","transactionLimit","address","image","isVerified","Boolean","isAdmin","timestamps","module","exports","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose')\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    // name: {\r\n    //   type: String,\r\n    //   required: [true, 'Please add a name'],\r\n    // },\r\n    name: {\r\n      type: String,\r\n      required: [true, 'Please add a name'],\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^[a-zA-Z ]{2,30}$/.test(v) // Name should only contain letters and spaces, 2-30 characters\r\n        },\r\n        message: (props) => `${props.value} is not a valid name! Only letters and spaces are allowed, and it must be 2-30 characters long.`,\r\n      },\r\n    },\r\n    // email: {\r\n    //   type: String,\r\n    //   required: [true, 'Please add an email'],\r\n    //   unique: true,\r\n    // },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Please add an email'],\r\n      unique: true,\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v) // Basic email format\r\n        },\r\n        message: (props) => `${props.value} is not a valid email!`,\r\n      },\r\n    },\r\n    // phone: {\r\n    //   type: String,\r\n    //   required: [true, 'Please add a phone number'],\r\n    // },\r\n    phone: {\r\n      type: String,\r\n      required: [true, 'Please add a phone number'],\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^[0-9]{10}$/.test(v); // Example: 10-digit phone number\r\n        },\r\n        message: (props) => `${props.value} is not a valid phone number!`,\r\n      },\r\n    },\r\n    // password: {\r\n    //   type: String,\r\n    //   required: [true, 'Please add a password'],\r\n    //   min: [6, 'password must contain at least 6 numbers'],\r\n    //   max: 12,\r\n    // },\r\n    password: {\r\n      type: String,\r\n      required: [true, 'Please add a password'],\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,12}$/.test(v) // Password: 6-12 characters, at least one letter and one number\r\n        },\r\n        message: (props) => `Password must be 6-12 characters long, and include at least one letter and one number.`,\r\n      },\r\n    },\r\n    identificationType: {\r\n      type: String,\r\n      required: [true, 'Please add identification type'],\r\n      enum: ['driver license', 'passport', 'national ID'],\r\n    },\r\n    identificationNumber: {\r\n      type: String,\r\n      required: [true, 'Please add the identification number'],\r\n      min: [6, 'at least 6 numbers'],\r\n      max: 12,\r\n      unique: true,\r\n    },\r\n    balance: {\r\n      type: Number,\r\n      default: 1000,\r\n    },\r\n    moneySend: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    moneyReceived: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    requestReceived: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    transactionLimit: {\r\n      type: Number,\r\n      default: 5000, // Daily transaction limit in rupees\r\n    },\r\n    address: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: String,\r\n    },\r\n    isVerified: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    isAdmin: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n)\r\n\r\nmodule.exports = mongoose.model('User', userSchema)\r\n"],"file":"userModal.dev.js"}