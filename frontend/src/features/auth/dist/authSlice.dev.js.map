{"version":3,"sources":["authSlice.js"],"names":[],"mappingssourcesContent":["// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n// import authService from './authService'\r\n\r\n// const user = JSON.parse(localStorage.getItem('user'))\r\n\r\n// const initialState = {\r\n//   user: user ? user : null,\r\n//   users: [],\r\n//   isError: false,\r\n//   isSuccess: false,\r\n//   isLoading: false,\r\n//   message: '',\r\n// }\r\n\r\n// // @login user\r\n// export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n//   try {\r\n//     return await authService.login(user)\r\n//   } catch(error) {\r\n//     const message =\r\n//       (error.response && error.response.data && error.response.data.message) ||\r\n//       error.message ||\r\n//       error.toString()\r\n//     return thunkAPI.rejectWithValue(message)\r\n//   }\r\n// })\r\n\r\n// // @register\r\n// export const register = createAsyncThunk(\r\n//   'auth/register',\r\n//   async (user, thunkAPI) => {\r\n//     try {\r\n//       return await authService.register(user)\r\n//     } catch (err) {\r\n//       const message =\r\n//         (err.response && err.response.data && err.response.data.message) ||\r\n//         err.message ||\r\n//         err.toString()\r\n//       return thunkAPI.rejectWithValue(message)\r\n//     }\r\n//   }\r\n// )\r\n\r\n// // @get all users\r\n// export const getusers = createAsyncThunk(\r\n//   'auth/getAllUsers',\r\n//   async (__, thunkAPI) => {\r\n//     try {\r\n//       const token = thunkAPI.getState().auth.user?.token\r\n//       if (!token) {\r\n//         return thunkAPI.rejectWithValue('No token found')\r\n//       }\r\n//       return await authService.getAllUsers(token)\r\n//     } catch (error) {\r\n//       const message =\r\n//         (error.response &&\r\n//           error.response.data &&\r\n//           error.response.data.message) ||\r\n//         error.message ||\r\n//         error.toString()\r\n//       return thunkAPI.rejectWithValue(message)\r\n//     }\r\n//   }\r\n// )\r\n\r\n// // @logout\r\n// export const logout = createAsyncThunk('auth/logout', async () => {\r\n//   return authService.logout()\r\n// })\r\n\r\n// export const authSlice = createSlice({\r\n//   name: 'auth',\r\n//   initialState,\r\n//   reducers: {\r\n//     reset: (state) => {\r\n//       state.users = []\r\n//       state.isLoading = false\r\n//       state.isError = false\r\n//       state.isSuccess = false\r\n//       state.message = ''\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(register.pending, (state) => {\r\n//         state.isLoading = true\r\n//       })\r\n//       .addCase(register.fulfilled, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isSuccess = true\r\n//         state.user = action.payload\r\n//       })\r\n//       .addCase(register.rejected, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isError = true\r\n//         state.message = action.payload\r\n//         state.user = null\r\n//       })\r\n//       .addCase(login.pending, (state) => {\r\n//         state.isLoading = true\r\n//       })\r\n//       .addCase(login.fulfilled, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isSuccess = true\r\n//         state.user = action.payload\r\n//       })\r\n//       .addCase(login.rejected, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isError = true\r\n//         state.message = action.payload\r\n//         state.user = null\r\n//       })\r\n//       .addCase(getusers.pending, (state) => {\r\n//         state.isLoading = true\r\n//       })\r\n//       .addCase(getusers.fulfilled, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isSuccess = true\r\n//         state.users = action.payload\r\n//       })\r\n//       .addCase(getusers.rejected, (state, action) => {\r\n//         state.isLoading = false\r\n//         state.isError = true\r\n//         state.message = action.payload\r\n//         state.users = []\r\n//       })\r\n//       .addCase(logout.fulfilled, (state) => {\r\n//         state.user = null\r\n//         state.users = []\r\n//         state.isLoading = false\r\n//         state.isError = false\r\n//         state.isSuccess = false\r\n//         state.message = ''\r\n//       })\r\n//   },\r\n// })\r\n\r\n// export const { reset } = authSlice.actions\r\n// export default authSlice.reducer\r\n"],"file":"authSlice.dev.js"}